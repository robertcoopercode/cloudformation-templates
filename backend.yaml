AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy back-end services into an ECS cluster
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: 'Container Parameters'
        Parameters:
          - ServiceName
          - ImageUrl
          - ContainerPort
          - ContainerCpu
          - ContainerMemory
          - DesiredCount
      - Label:
          default: 'Parent Stack'
        Parameters:
          - ParentClusterStack
      - Label:
          default: 'Load Balancer Parameters'
        Parameters:
          - AppHostname
          - Priority
Parameters:
  ParentClusterStack:
    Type: String
    Default: vpc
    Description: The name of the parent cluster stack that you created. Necessary
      to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Default: backend
    Description: A name for the service
  AppHostname:
    Type: String
    Default: dev.api.techjobhunt.com
    Description: App hostname used for load balancer traffic routing
  ImageUrl:
    Type: String
    Default: 233737578294.dkr.ecr.us-east-1.amazonaws.com/tech-job-hunt/backend:latest
    Description: The url of a docker image that contains the application process that
      will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 4000
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 800
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 800
    Description: How much memory in megabytes to give the container
  Priority:
    Type: Number
    Default: 3
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

Resources:
  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              'awslogs-region': !Ref 'AWS::Region'
              'awslogs-group':
                Fn::ImportValue: !Sub '${ParentClusterStack}-LogGroup'
              'awslogs-stream-prefix': !Ref 'AWS::StackName'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - HttpsLoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue: !Join [':', [!Ref 'ParentClusterStack', 'ClusterName']]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 31
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Name: !Ref 'ServiceName'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Join [':', [!Ref 'ParentClusterStack', 'VPCId']]

  # Create a rule on the load balancer for routing https traffic to the target group
  HttpsLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: host-header
          Values:
            - !Ref AppHostname
        - Field: path-pattern
          Values: ['*']
      ListenerArn:
        Fn::ImportValue: !Join [':', [!Ref 'ParentClusterStack', 'PublicHttpsListener']]
      Priority: !Ref 'Priority'

  # Add A Record pointing to load balancer in order to access the app at it's AppHostname
  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: techjobhunt.com.
      Comment: DNS name for my instance.
      Name: !Join ['', [!Ref 'AppHostname', .]]
      Type: A
      AliasTarget:
        DNSName:
          Fn::Select:
            - 1
            - Fn::Split:
                - 'http://'
                - Fn::ImportValue: !Join [':', [!Ref 'ParentClusterStack', 'ExternalUrl']]
        HostedZoneId:
          Fn::ImportValue: !Join [':', [!Ref 'ParentClusterStack', 'HostedZoneId']]
